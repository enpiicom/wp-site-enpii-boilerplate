<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="VIP Coding Standards" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
	<description>The custom ruleset for the VIP Coding Standards itself.</description>

	<file>resources/views/</file>
	<file>wp-app-config/</file>
	<file>src/</file>
	<file>tests/Support</file>
	<file>tests/Unit</file>
	<file>./enpii-base.php</file>
	<file>./enpii-base-init.php</file>
	<file>./enpii-base-bootstrap.php</file>

	<include-pattern>./*.php</include-pattern>

	<!-- Exclude Composer vendor directory. -->
	<exclude-pattern>*/.git/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>
	<exclude-pattern>*/classes/*</exclude-pattern>
	<exclude-pattern>*/src-deps/*</exclude-pattern>

	<arg value="sp"/> <!-- Show sniff and progress -->
	<arg name="basepath" value="."/><!-- Strip the file paths down to the relevant bit -->
	<arg name="colors"/>
	<arg name="extensions" value="php"/>
	<arg name="parallel" value="50"/>

	<!-- Cache the results between runs. -->
	<!-- <arg name="cache" value="./phpcs.cache"/> -->

	<rule ref="WordPress-Extra">
		<exclude name="WordPress.Files.FileName"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName"/>
		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
		<exclude name="WordPress.PHP.YodaConditions"/>
		<exclude name="Generic.Formatting.MultipleStatementAlignment.NotSameWarning"/>
		<exclude name="Universal.Arrays.DisallowShortArraySyntax.Found"/>
		<exclude name="WordPress.Arrays.MultipleStatementAlignment.DoubleArrowNotAligned"/>
	</rule>

	<rule ref="WordPress-VIP-Go"/>

	<!-- Enforce PSR1 compatible namespaces. -->
	<rule ref="PSR1.Classes.ClassDeclaration"/>

	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<property name="alignMultilineItems" value="!=100"/>
		</properties>
	</rule>

	<rule ref="PSR2.Methods.FunctionClosingBrace"/>

	<!-- Disallow long array syntax. -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

	<!-- Disallow Yoda conditions. -->
	<rule ref="Generic.ControlStructures.DisallowYodaConditions"/>

	<!-- Suppress no code rule. -->
	<rule ref="Internal.NoCodeFound">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.CommentedOutCode.Found">
		<severity>0</severity>
	</rule>

	<!-- Check code for cross-version PHP compatibility. -->
	<config name="testVersion" value="7.3-"/>
	<rule ref="PHPCompatibility">
		<!-- Exclude PHP constants back-filled by PHPCS. -->
		<exclude name="PHPCompatibility.PHP.NewConstants.t_finallyFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.t_yieldFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.t_ellipsisFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.t_powFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.t_pow_equalFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.t_spaceshipFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.t_coalesceFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.t_coalesce_equalFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.t_yield_fromFound"/>

		<!-- Unclear how, but appears to be back-filled anyhow, could be that PHP did so before the token was in use. -->
		<exclude name="PHPCompatibility.PHP.NewConstants.t_traitFound"/>
	</rule>

</ruleset>
